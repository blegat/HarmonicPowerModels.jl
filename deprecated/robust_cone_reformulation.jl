# use pkgs
using JuMP, Gurobi, LinearAlgebra, Test

# parameters
b0  = 0.9780549381510736
d0  = 0.2757743321951065

### BASE SOCP ###
# model
model = Model(Gurobi.Optimizer)

# variables
@variable(model, y[1:2])

# objective 
@objective(model, Min, y[1])

# constraint
@constraint(model, [y[1] - d0, y[2] - b0] in SecondOrderCone())

# optimize
## Note that resolving the problem, shows an zero objective in the solver print.
## This seems to be a Gurobi.jl problem
optimize!(model)
solution_summary(model)

# test the objective value
@test objective_value(model) ‚âà 0.2757743321951065

### REFORMULATED SOCP ###

# n = cardinality of y
# k = number of constraints

# Reformulation of ||A(Œ∑)y + b(Œ∑)||‚ÇÇ <= c·µÄ(œá)y + d(œá) ‚àÄ Œ∑ ‚àà ùì©À°, œá ‚àà ùì© ≥

# Right hand side pertubation set
# ùì© ≥ = {œá : ‚àÉ u : Pœá + Qu + p ‚àà K}, where K is closed convex pointed cone or 
# polyhedral cone 
# => P, Q, p are needed for (a)
# Remark: if the cone K is a direct product of simpler cones K¬π,..., KÀ¢, it 
# takes the form 
# ùì© ≥ = {œá : ‚àÉ u¬π,...,u·¥ø : P‚Çõœá + Q·µ£u ≥ + p·µ£ ‚àà K ≥, r = 1,...,R}
# Example: ùì© is an intersection of concetric co-axial box and ellipsiod,
# ùì© = {œá ‚àà ‚Ñù·¥∏ : -1 ‚â§ œá‚Çó ‚â§ 1, l ‚â§ L, ‚àö(‚àë‚Çó‚Çå‚ÇÅ‚Çã‚Çó (œá‚Çó)¬≤/(œÉ‚Çó)¬≤) ‚â§ Œ©},
# where œÉ‚Çó > 0 and Œ© > 0 are given parameters, and becomes,
# ùì© = {œá ‚àà ‚Ñù·¥∏ : P‚ÇÅœá + p‚ÇÅ ‚àà K¬π, P‚ÇÇœá + p‚ÇÇ ‚àà K¬≤},
# where P‚ÇÅœá = [œá;0], p‚ÇÅ = [zeros(L,1);1], K¬π = {(z,t) ‚àà ‚Ñù·¥∏ √ó ‚Ñù : t ‚â• ||z||‚àû}, 
# whence its dual K¬π* = {(z,t) ‚àà ‚Ñù·¥∏ √ó ‚Ñù : t ‚â• ||z||‚ÇÅ}
# where P‚ÇÇœá = [‚àë‚Åª¬πœá;0] with ‚àë = diagm(œÉ‚ÇÅ,..,œÉ‚Çó), p‚ÇÇ = [zeros(L,1);Œ©] and K¬≤ is 
# the Lorentz cone of the dimension L+1, whence its dual K¬≤* = K¬≤.

# Left hand side uncertainty set
# ZÀ° ={Œ∑ = [Œ¥A,Œ¥b] : |(Œ¥A)·µ¢‚±º| ‚â§ Œ¥·µ¢‚±º, 1 ‚â§ i ‚â§ k, 1 ‚â§ j ‚â§ n, |(Œ¥b)·µ¢|, 1 ‚â§ i ‚â§ k},
# [A(Œ∂),b(Œ∂)] = [A‚Åø, b‚Åø] + [Œ¥A, Œ¥b].
# => A‚Åø, b‚Åø, Œ¥·µ¢‚±º, Œ¥·µ¢ are needed for (b)
# Example: if b ‚àà [0.75,1.25], than b‚Åø = 1.0 and corresponding Œ¥·µ¢ = 0.25

# Equivalent explicit system of conic quadratic and linear constraints
# (a.1) œÑ + p·µÄv ‚â§ Œ¥(y)
# (a.2) P·µÄv = œÉ(y)
# (a.3) Q·µÄv = 0
# (a.4) v ‚àà K* = {v : v·µÄw ‚â• 0, ‚àÄ w ‚àà K}
# (b.1) z·µ¢ ‚â• |(A‚Åøy + b‚Åø)·µ¢| + Œ¥·µ¢ + ‚àë‚±º‚Çå‚ÇÅ‚Çã‚Çô |Œ¥·µ¢‚±ºy‚±º|, ‚àÄ i ‚àà 1,...,k 
# (b.2) ||z||‚ÇÇ <= œÑ
# where K* is the dual cone of K, note that nonnegative orthants, Lorentz and 
# Semidefinite cones are self-dual, and thus their finite direct products, i.e.,
# canonical cones, are self-dual as wel. 

# additional variables
# v is a vector variable with the same cardinality of y
# z is a vector variable with the same cardinality of y
# œÑ is a scalar variable

# reformulation of |x| + |y| ‚â§ 1 => x + y ‚â§ 1, x - y ‚â§ 1, -x + y ‚â§ 1, -x - y ‚â§ 1

# model
rm = Model(Gurobi.Optimizer)

# variables
@variable(rm, y[1:2])
@variable(rm, v[1:2])
@variable(rm, z[1:2])

@variable(rm, œÑ)

# objective 
@objective(model, Min, y[1])

# constraints


# b2) ||z||‚ÇÇ <= œÑ
@constraint(rm, [œÑ, [z...]] in SecondOrderCone())